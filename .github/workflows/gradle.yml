# WARNING: Do not edit this file directly. Instead, go to:
#
# https://github.com/micronaut-projects/micronaut-project-template/tree/master/.github/workflows
#
# and edit them there. Note that it will be sync'ed to all the Micronaut repos
name: Java CI
on:
  push:
    branches:
      - master
      - '[1-9]+.[0-9]+.x'
  pull_request:
    branches:
      - master
      - '[1-9]+.[0-9]+.x'
jobs:
  start-runner:
    name: Start self-hosted OracleCloud runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-runner.outputs.label }}
    steps:
      - name: Install OCI CLI
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "$HOME/bin" >> $GITHUB_PATH
          exec -l $SHELL
      - name: Configure OCI CLI
        env:
          OCI_USER: ${{ secrets.OCI_USER }}
          OCI_FINGERPRINT: ${{ secrets.OCI_FINGERPRINT }}
          OCI_PASSPHRASE: ${{ secrets.OCI_PASSPHRASE }}
          OCI_TENANCY: ${{ secrets.OCI_TENANCY }}
          OCI_KEY_FILE: ${{ secrets.OCI_KEY_FILE }}
          OCI_REGION: ${{ secrets.OCI_REGION }}
        run: |
          mkdir $HOME/.oci
          echo "[DEFAULT]" >> $HOME/.oci/config
          echo "user=${OCI_USER}" >> $HOME/.oci/config
          echo "fingerprint=${OCI_FINGERPRINT}" >> $HOME/.oci/config
          echo "pass_phrase=${OCI_PASSPHRASE}" >> $HOME/.oci/config
          echo "region=${OCI_REGION}" >> $HOME/.oci/config
          echo "tenancy=${OCI_TENANCY}" >> $HOME/.oci/config
          echo "key_file=$HOME/.oci/key.pem" >> $HOME/.oci/config
          echo "${OCI_KEY_FILE}" >> $HOME/.oci/key.pem
          oci setup repair-file-permissions --file $HOME/.oci/config
          oci setup repair-file-permissions --file $HOME/.oci/key.pem
      - name: Start runner
        id: start-runner
        env:
          OCI_COMPARTMENT: ${{ secrets.OCI_COMPARTMENT }}
          OCI_RUNNER_IMAGE: ${{ secrets.OCI_RUNNER_IMAGE }}
          OCI_SUBNET: ${{ secrets.OCI_SUBNET }}
          OCI_AV_DOMAIN: ${{ secrets.OCI_AV_DOMAIN }}
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          REGISTRATION_TOKEN_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runners/registration-token"
          export RUNNER_TOKEN=$(curl -X POST -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${PERSONAL_ACCESS_TOKEN}" ${REGISTRATION_TOKEN_URL}  | jq -r '.token')
          USER_DATA_RAW=$(
            cat <<EOM
          #!/usr/bin/env bash
          cd /home/github-runner
          mkdir actions-runner && cd actions-runner
          curl -o actions-runner-linux-x64-2.277.1.tar.gz -L https://github.com/actions/runner/releases/download/v2.277.1/actions-runner-linux-x64-2.277.1.tar.gz
          tar xzf ./actions-runner-osx-x64-2.277.1.tar.gz
          chown -R github-runner:github-runner .
          sudo -u github-runner ./config.sh --name ${GITHUB_WORKFLOW}${GITHUB_RUN_ID} --url https://github.com/${GITHUB_REPOSITORY} --token ${RUNNER_TOKEN} --labels ${GITHUB_RUN_ID}
          sudo -u github-runner ./run.sh &
          EOM
          )
          USER_DATA=$(echo "$USER_DATA_RAW" | base64 -w 0)
          INSTANCE_NAME=$( echo "${GITHUB_WORKFLOW}${GITHUB_RUN_ID}" | sed 's/[[:space:]]//g')
          oci compute instance launch --compartment-id "${OCI_COMPARTMENT}" --metadata "{\"user_data\": \"$USER_DATA\"}" --display-name "${INSTANCE_NAME}" --subnet-id "${OCI_SUBNET}" --wait-for-state RUNNING --image-id $OCI_RUNNER_IMAGE --availability-domain "${OCI_AV_DOMAIN}" --shape VM.Standard.E4.Flex --shape-config "{\"ocpus\": 4, \"memoryInGBs\":32}"
          echo "::set-output name=label::${GITHUB_RUN_ID}"
  build:
    if: github.repository != 'micronaut-projects/micronaut-project-template'
    needs: start-runner
    runs-on: ${{ needs.start-runner.label }}
    strategy:
      matrix:
        java: ['8', '11', '15']
        k8s: ['1.16', '1.17', '1.18', '1.19']
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2.1.4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: Optional setup step
        env:
          K8S_VERSION: ${{ matrix.k8s }}
        run: |
          [ -f ./setup.sh ] && ./setup.sh || true
      - name: Build with Gradle
        run: |
          ./gradlew dependencyUpdates check --continue
          kind delete cluster kind
        env:
          TESTCONTAINERS_RYUK_DISABLED: true
      - name: Publish to Sonatype Snapshots
        if: success() && github.event_name == 'push' && matrix.java == '8' && matrix.k8s == '1.19'
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
        run: ./gradlew publishToSonatype docs --no-daemon
      - name: Determine docs target repository
        uses: haya14busa/action-cond@v1
        id: docs_target
        with:
          cond: ${{ github.repository == 'micronaut-projects/micronaut-core' }}
          if_true: "micronaut-projects/micronaut-docs"
          if_false: ${{ github.repository }}
      - name: Publish to Github Pages
        if: success() && github.event_name == 'push' && matrix.java == '8' && matrix.k8s == '1.19'
        uses: micronaut-projects/github-pages-deploy-action@master
        env:
          TARGET_REPOSITORY: ${{ steps.docs_target.outputs.value }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          BRANCH: gh-pages
          FOLDER: build/docs
